from collections import deque

class Solution:

    # Function to find out minimum steps Knight needs to reach target position.
    def minStepToReachTarget(self, KnightPos, TargetPos, n):
        # Possible moves for a knight in chess
        moves = [
            (2, 1), (1, 2), (-1, 2), (-2, 1),
            (-2, -1), (-1, -2), (1, -2), (2, -1)
        ]

        # Convert positions to 0-based indexing
        start = (KnightPos[0] - 1, KnightPos[1] - 1)
        target = (TargetPos[0] - 1, TargetPos[1] - 1)

        # BFS initialization
        queue = deque([(start, 0)])  # (position, steps)
        visited = set()
        visited.add(start)

        while queue:
            (x, y), steps = queue.popleft()

            if (x, y) == target:
                return steps

            for dx, dy in moves:
                nx, ny = x + dx, y + dy

                if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:
                    visited.add((nx, ny))
                    queue.append(((nx, ny), steps + 1))

        return -1  # If the target is not reachable (though in a valid chessboard, this should not happen)
