class Solution(object):
    def knightDialer(self, n):
        """
        :type n: int
        :rtype: int
        """
        memo = {}
        mod = 10 ** 9 + 7
        
        # Possible moves of a knight from each digit
        moves = {
            0: [4, 6],
            1: [6, 8],
            2: [7, 9],
            3: [4, 8],
            4: [0, 3, 9],
            5: [],
            6: [0, 1, 7],
            7: [2, 6],
            8: [1, 3],
            9: [2, 4]
        }
        
        def calc(num, remaining_steps):
            if remaining_steps == 0:
                return 1
            if (num, remaining_steps) in memo:
                return memo[(num, remaining_steps)]
            
            count = 0
            for move in moves[num]:
                count += calc(move, remaining_steps - 1)
                count %= mod
            
            memo[(num, remaining_steps)] = count
            return count
        
        ans = 0
        for i in range(10):
            ans += calc(i, n - 1)
            ans %= mod
        
        return ans
