class Solution(object):
    def gameOfLife(self, board):
        """
        :type board: List[List[int]]
        :rtype: None Do not return anything, modify board in-place instead.
        """
        rows = len(board)
        cols = len(board[0])
        d = [[0, 1], [0, -1], [1, 0], [-1, 0], [1, 1], [1, -1], [-1, 1], [-1, -1]]
        
        # Step 1: Update the board with intermediate states
        for i in range(rows):
            for j in range(cols):
                live_cnt = 0
                for a, b in d:
                    ni = i + a
                    nj = j + b
                    if 0 <= ni < rows and 0 <= nj < cols and abs(board[ni][nj]) == 1:
                        live_cnt += 1
                
                if board[i][j] == 1:
                    if live_cnt < 2 or live_cnt > 3:
                        board[i][j] = -1  # Live to dead
                else:
                    if live_cnt == 3:
                        board[i][j] = 2  # Dead to live

        # Step 2: Finalize the board to the next state
        for i in range(rows):
            for j in range(cols):
                if board[i][j] == -1:
                    board[i][j] = 0
                elif board[i][j] == 2:
                    board[i][j] = 1

