class Solution(object):
    def exist(self, board, word):
        rows = len(board)
        cols = len(board[0])
        
        def dfs(row, col, index):
            if index == len(word):
                return True
            
            if row < 0 or row >= rows or col < 0 or col >= cols or board[row][col] != word[index]:
                return False
            
            # Mark the current cell as visited
            temp, board[row][col] = board[row][col], '#'
            
            # Explore adjacent cells
            found = dfs(row - 1, col, index + 1) or \
                    dfs(row + 1, col, index + 1) or \
                    dfs(row, col - 1, index + 1) or \
                    dfs(row, col + 1, index + 1)
            
            # Restore the cell value
            board[row][col] = temp
            
            return found
        
        # Iterate through each cell in the board
        for row in range(rows):
            for col in range(cols):
                if dfs(row, col, 0):
                    return True
        
        return False
